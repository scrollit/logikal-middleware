"""add_image_path_to_elevations

Revision ID: 5b273678e0c3
Revises: d4e5f6a7b8c9
Create Date: 2025-09-29 20:43:44.538932

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5b273678e0c3'
down_revision: Union[str, Sequence[str], None] = 'd4e5f6a7b8c9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if clients table exists before dropping it
    connection = op.get_bind()
    
    # Check if clients table exists
    result = connection.execute(sa.text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'clients'
        );
    """))
    clients_table_exists = result.scalar()
    
    if clients_table_exists:
        # Drop indexes if they exist
        try:
            op.drop_index(op.f('ix_clients_client_id'), table_name='clients')
        except:
            pass  # Index doesn't exist, continue
        
        try:
            op.drop_index(op.f('ix_clients_id'), table_name='clients')
        except:
            pass  # Index doesn't exist, continue
            
        # Drop the table
        op.drop_table('clients')
    op.add_column('elevations', sa.Column('image_path', sa.String(length=500), nullable=True))
    op.alter_column('elevations', 'synced_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last sync timestamp',
               existing_nullable=True)
    op.alter_column('elevations', 'sync_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='Sync status: pending, synced, error')
    op.alter_column('phases', 'synced_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last sync timestamp',
               existing_nullable=True)
    op.alter_column('phases', 'sync_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='Sync status: pending, synced, error')
    # Drop the old index if it exists
    try:
        op.drop_index(op.f('ix_phases_project_logikal_unique'), table_name='phases')
    except:
        pass  # Index doesn't exist, continue
    
    # Create the new index
    op.create_index(op.f('ix_phases_logikal_id'), 'phases', ['logikal_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_phases_logikal_id'), table_name='phases')
    op.create_index(op.f('ix_phases_project_logikal_unique'), 'phases', ['project_id', 'logikal_id'], unique=True)
    op.alter_column('phases', 'sync_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='Sync status: pending, synced, error')
    op.alter_column('phases', 'synced_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Last sync timestamp',
               existing_nullable=True)
    op.alter_column('elevations', 'sync_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='Sync status: pending, synced, error')
    op.alter_column('elevations', 'synced_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Last sync timestamp',
               existing_nullable=True)
    op.drop_column('elevations', 'image_path')
    op.create_table('clients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('client_secret_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), autoincrement=False, nullable=False),
    sa.Column('rate_limit_per_hour', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('clients_pkey')),
    sa.UniqueConstraint('client_id', name=op.f('clients_client_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_clients_id'), 'clients', ['id'], unique=False)
    op.create_index(op.f('ix_clients_client_id'), 'clients', ['client_id'], unique=False)
    # ### end Alembic commands ###
