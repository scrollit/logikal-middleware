"""add_smart_sync_timestamp_fields

Revision ID: 693e88501a64
Revises: 70a8b9c2d4e5
Create Date: 2025-09-28 08:41:10.983879

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '693e88501a64'
down_revision: Union[str, Sequence[str], None] = '70a8b9c2d4e5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if clients table exists before dropping it
    connection = op.get_bind()
    
    # Check if clients table exists
    result = connection.execute(sa.text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'clients'
        );
    """))
    clients_table_exists = result.scalar()
    
    if clients_table_exists:
        # Drop indexes if they exist
        try:
            op.drop_index(op.f('ix_clients_client_id'), table_name='clients')
        except:
            pass  # Index doesn't exist, continue
        
        try:
            op.drop_index(op.f('ix_clients_id'), table_name='clients')
        except:
            pass  # Index doesn't exist, continue
            
        # Drop the table
        op.drop_table('clients')
    op.add_column('elevations', sa.Column('last_sync_date', sa.DateTime(timezone=True), nullable=True, comment='Last time data was synced from Logikal'))
    op.add_column('elevations', sa.Column('last_update_date', sa.DateTime(timezone=True), nullable=True, comment='Last time data was modified in Logikal'))
    op.add_column('phases', sa.Column('last_sync_date', sa.DateTime(timezone=True), nullable=True, comment='Last time data was synced from Logikal'))
    op.add_column('phases', sa.Column('last_update_date', sa.DateTime(timezone=True), nullable=True, comment='Last time data was modified in Logikal'))
    op.add_column('projects', sa.Column('last_sync_date', sa.DateTime(timezone=True), nullable=True, comment='Last time data was synced from Logikal'))
    op.add_column('projects', sa.Column('last_update_date', sa.DateTime(timezone=True), nullable=True, comment='Last time data was modified in Logikal'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('projects', 'last_update_date')
    op.drop_column('projects', 'last_sync_date')
    op.drop_column('phases', 'last_update_date')
    op.drop_column('phases', 'last_sync_date')
    op.drop_column('elevations', 'last_update_date')
    op.drop_column('elevations', 'last_sync_date')
    op.create_table('clients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('client_secret_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('rate_limit_per_hour', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('clients_pkey'))
    )
    op.create_index(op.f('ix_clients_id'), 'clients', ['id'], unique=False)
    op.create_index(op.f('ix_clients_client_id'), 'clients', ['client_id'], unique=True)
    # ### end Alembic commands ###
